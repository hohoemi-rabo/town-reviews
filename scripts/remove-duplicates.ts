/**
 * ÈáçË§áÊñΩË®≠„Éá„Éº„Çø„ÇíÂâäÈô§„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 *
 * ‰Ωø„ÅÑÊñπ:
 * npm run remove-duplicates        # „Éâ„É©„Ç§„É©„É≥ÔºàÂâäÈô§ÂØæË±°„ÇíË°®Á§∫„ÅÆ„ÅøÔºâ
 * npm run remove-duplicates:exec   # ÂÆüÈöõ„Å´ÂâäÈô§„ÇíÂÆüË°å
 */

import * as fs from 'fs'
import * as path from 'path'

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË™≠„ÅøËæº„Åø
const envPath = path.join(__dirname, '..', '.env.local')
if (fs.existsSync(envPath)) {
  const envFile = fs.readFileSync(envPath, 'utf-8')
  envFile.split('\n').forEach((line) => {
    const trimmed = line.trim()
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...values] = trimmed.split('=')
      if (key && values.length > 0) {
        process.env[key.trim()] = values.join('=').trim()
      }
    }
  })
}

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('Error: Supabase credentials not found in .env.local')
  process.exit(1)
}

// „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÅßÂÆüË°å„É¢„Éº„Éâ„ÇíÂà§ÂÆö
const isExecuteMode = process.argv.includes('--execute')

type Facility = {
  id: string
  name: string
  name_kana: string | null
  address: string
  area: string
  category: string
  lat: number
  lng: number
  place_id: string | null
  google_maps_url: string | null
  phone: string | null
  is_verified: boolean
  created_by: string
  created_at: string
}

type DuplicateGroup = {
  reason: string
  facilities: Facility[]
  keepId: string
  deleteIds: string[]
}

async function fetchAllFacilities(): Promise<Facility[]> {
  const facilities: Facility[] = []
  let offset = 0
  const limit = 1000

  console.log('ÊñΩË®≠„Éá„Éº„Çø„ÇíÂèñÂæó‰∏≠...')

  while (true) {
    const response = await fetch(
      `${SUPABASE_URL}/rest/v1/places?select=*&limit=${limit}&offset=${offset}&order=created_at.asc`,
      {
        headers: {
          apikey: SUPABASE_SERVICE_KEY as string,
          Authorization: `Bearer ${SUPABASE_SERVICE_KEY}`,
        },
      }
    )

    if (!response.ok) {
      console.error('Failed to fetch facilities:', await response.text())
      process.exit(1)
    }

    const batch: Facility[] = await response.json()
    facilities.push(...batch)

    console.log(`  ÂèñÂæóÊ∏à„Åø: ${facilities.length}‰ª∂`)

    if (batch.length < limit) break
    offset += limit
  }

  return facilities
}

function findExactDuplicates(facilities: Facility[]): DuplicateGroup[] {
  const duplicates: DuplicateGroup[] = []
  const locationMap = new Map<string, Facility[]>()

  // Á∑ØÂ∫¶ÁµåÂ∫¶„ÅÆÁµÑ„ÅøÂêà„Çè„Åõ„Åß„Ç∞„É´„Éº„ÉóÂåñ
  facilities.forEach((f) => {
    const key = `${f.lat.toFixed(6)},${f.lng.toFixed(6)}`
    if (!locationMap.has(key)) {
      locationMap.set(key, [])
    }
    locationMap.get(key)!.push(f)
  })

  // 2‰ª∂‰ª•‰∏ä„ÅÇ„Çã‰ΩçÁΩÆ„ÇíÈáçË§á„Å®„Åó„Å¶ÊäΩÂá∫
  locationMap.forEach((group, location) => {
    if (group.length > 1) {
      // created_at„ÅßÊòáÈ†Ü„ÇΩ„Éº„ÉàÔºàÂè§„ÅÑÈ†ÜÔºâ
      group.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())

      // ÊúÄÊñ∞„ÅÆ„ÇÇ„ÅÆ„ÇíÊÆã„Åó„ÄÅÂè§„ÅÑ„ÇÇ„ÅÆ„ÇíÂâäÈô§ÂØæË±°„Å´„Åô„Çã
      const keepFacility = group[group.length - 1]
      const deleteFacilities = group.slice(0, -1)

      duplicates.push({
        reason: `Á∑ØÂ∫¶ÁµåÂ∫¶„ÅåÂÆåÂÖ®‰∏ÄËá¥ (${location})`,
        facilities: group,
        keepId: keepFacility.id,
        deleteIds: deleteFacilities.map((f) => f.id),
      })
    }
  })

  return duplicates
}

function findNameAndAddressDuplicates(
  facilities: Facility[],
  alreadyMarkedForDeletion: Set<string>
): DuplicateGroup[] {
  const duplicates: DuplicateGroup[] = []
  const nameAddressMap = new Map<string, Facility[]>()

  // Êó¢„Å´ÂâäÈô§ÂØæË±°„Å´„Å™„Å£„Å¶„ÅÑ„ÇãÊñΩË®≠„ÇíÈô§Â§ñ
  const remainingFacilities = facilities.filter((f) => !alreadyMarkedForDeletion.has(f.id))

  // ÊñΩË®≠ÂêçÔºã‰ΩèÊâÄ„Åß„Ç∞„É´„Éº„ÉóÂåñ
  remainingFacilities.forEach((f) => {
    const key = `${f.name.trim().toLowerCase()}|${f.address.trim().toLowerCase()}`
    if (!nameAddressMap.has(key)) {
      nameAddressMap.set(key, [])
    }
    nameAddressMap.get(key)!.push(f)
  })

  // 2‰ª∂‰ª•‰∏ä„ÅÇ„Çã„ÇÇ„ÅÆ„ÇíÈáçË§á„Å®„Åó„Å¶ÊäΩÂá∫
  nameAddressMap.forEach((group) => {
    if (group.length > 1) {
      // created_at„ÅßÊòáÈ†Ü„ÇΩ„Éº„ÉàÔºàÂè§„ÅÑÈ†ÜÔºâ
      group.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())

      // ÊúÄÊñ∞„ÅÆ„ÇÇ„ÅÆ„ÇíÊÆã„Åó„ÄÅÂè§„ÅÑ„ÇÇ„ÅÆ„ÇíÂâäÈô§ÂØæË±°„Å´„Åô„Çã
      const keepFacility = group[group.length - 1]
      const deleteFacilities = group.slice(0, -1)

      duplicates.push({
        reason: `ÊñΩË®≠Âêç„Å®‰ΩèÊâÄ„Åå‰∏ÄËá¥ (${keepFacility.name})`,
        facilities: group,
        keepId: keepFacility.id,
        deleteIds: deleteFacilities.map((f) => f.id),
      })
    }
  })

  return duplicates
}

async function backupToCSV(facilities: Facility[]) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5)
  const filename = `backup_before_dedup_${timestamp}.csv`
  const filepath = path.join(__dirname, 'output', filename)

  // output „Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
  const outputDir = path.join(__dirname, 'output')
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true })
  }

  const headers = [
    'id',
    'name',
    'name_kana',
    'address',
    'area',
    'category',
    'lat',
    'lng',
    'place_id',
    'google_maps_url',
    'phone',
    'is_verified',
    'created_by',
    'created_at',
  ]

  const rows = facilities.map((f) =>
    headers.map((h) => {
      const value = f[h as keyof Facility]
      if (value === null || value === undefined) return ''
      const stringValue = String(value)
      return `"${stringValue.replace(/"/g, '""')}"`
    })
  )

  const csv = [headers.join(','), ...rows.map((row) => row.join(','))].join('\n')
  const bom = '\uFEFF'

  fs.writeFileSync(filepath, bom + csv, 'utf-8')

  console.log(`‚úÖ „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóCSV„Çí‰ΩúÊàê: ${filepath}`)
  return filepath
}

async function deleteFacilities(ids: string[]) {
  let successCount = 0
  let errorCount = 0

  console.log(`\nÂâäÈô§ÂÆüË°å‰∏≠...`)

  for (const id of ids) {
    try {
      const response = await fetch(`${SUPABASE_URL}/rest/v1/places?id=eq.${id}`, {
        method: 'DELETE',
        headers: {
          apikey: SUPABASE_SERVICE_KEY as string,
          Authorization: `Bearer ${SUPABASE_SERVICE_KEY}`,
          Prefer: 'return=minimal',
        },
      })

      if (response.ok) {
        successCount++
        process.stdout.write(`\rÂâäÈô§Ê∏à„Åø: ${successCount}/${ids.length}`)
      } else {
        errorCount++
        console.error(`\nID ${id} „ÅÆÂâäÈô§Â§±Êïó: ${await response.text()}`)
      }

      // Rate limitÂØæÁ≠ñ
      await new Promise((resolve) => setTimeout(resolve, 50))
    } catch (error) {
      errorCount++
      console.error(`\nID ${id} „ÅÆÂâäÈô§„Ç®„É©„Éº: ${error}`)
    }
  }

  console.log(`\n\nÂâäÈô§ÂÆå‰∫Ü: ÊàêÂäü${successCount}‰ª∂, Â§±Êïó${errorCount}‰ª∂`)
}

function displayDuplicates(duplicateGroups: DuplicateGroup[]) {
  console.log('\n' + '='.repeat(70))
  console.log('üîç ÈáçË§áÊ§úÂá∫ÁµêÊûú')
  console.log('='.repeat(70))

  let totalDeleteCount = 0

  duplicateGroups.forEach((group, index) => {
    console.log(`\n„Äê${index + 1}„Äë ${group.reason}`)
    console.log(`  „Ç∞„É´„Éº„ÉóÂÜÖ‰ª∂Êï∞: ${group.facilities.length}‰ª∂`)
    console.log(`  ÂâäÈô§ÂØæË±°: ${group.deleteIds.length}‰ª∂\n`)

    group.facilities.forEach((f) => {
      const isKeep = f.id === group.keepId
      const marker = isKeep ? '‚úÖ [‰øùÊåÅ]' : '‚ùå [ÂâäÈô§]'
      console.log(`  ${marker} ID: ${f.id}`)
      console.log(`      ÊñΩË®≠Âêç: ${f.name}`)
      console.log(`      ‰ΩèÊâÄ: ${f.address}`)
      console.log(`      „Ç®„É™„Ç¢: ${f.area}`)
      console.log(`      ‰ΩçÁΩÆ: (${f.lat}, ${f.lng})`)
      console.log(`      ÁôªÈå≤Êó•ÊôÇ: ${f.created_at}`)
      console.log('')
    })

    totalDeleteCount += group.deleteIds.length
  })

  console.log('='.repeat(70))
  console.log('üìä „Çµ„Éû„É™„Éº')
  console.log('='.repeat(70))
  console.log(`ÈáçË§á„Ç∞„É´„Éº„ÉóÊï∞: ${duplicateGroups.length}`)
  console.log(`ÂâäÈô§ÂØæË±°ÊñΩË®≠Êï∞: ${totalDeleteCount}‰ª∂`)
  console.log('='.repeat(70))

  return totalDeleteCount
}

async function main() {
  console.log('üîç ÈáçË§áÊñΩË®≠ÂâäÈô§„Çπ„ÇØ„É™„Éó„Éà\n')
  console.log(`„É¢„Éº„Éâ: ${isExecuteMode ? 'üî¥ ÂÆüË°å„É¢„Éº„ÉâÔºàÂâäÈô§ÂÆüË°åÔºâ' : 'üü¢ „Éâ„É©„Ç§„É©„É≥ÔºàÁ¢∫Ë™ç„ÅÆ„ÅøÔºâ'}\n`)

  // 1. ÂÖ®ÊñΩË®≠„ÇíÂèñÂæó
  const facilities = await fetchAllFacilities()
  console.log(`‚úÖ ${facilities.length}‰ª∂„ÅÆÊñΩË®≠„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü\n`)

  // 2. „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóCSV„Çí‰ΩúÊàê
  console.log('„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóCSV‰ΩúÊàê‰∏≠...')
  await backupToCSV(facilities)

  // 3. ÈáçË§á„ÇíÊ§úÂá∫
  console.log('\nÈáçË§áÊ§úÂá∫‰∏≠...')

  // 3-1. Á∑ØÂ∫¶ÁµåÂ∫¶„ÅåÂÆåÂÖ®‰∏ÄËá¥„Åô„ÇãÈáçË§á
  const exactDuplicates = findExactDuplicates(facilities)
  console.log(`  Á∑ØÂ∫¶ÁµåÂ∫¶ÂÆåÂÖ®‰∏ÄËá¥: ${exactDuplicates.length}„Ç∞„É´„Éº„Éó`)

  // 3-2. ÊñΩË®≠ÂêçÔºã‰ΩèÊâÄ„Åå‰∏ÄËá¥„Åô„ÇãÈáçË§áÔºàÊó¢„Å´ÂâäÈô§ÂØæË±°„ÅÆ„ÇÇ„ÅÆ„ÅØÈô§Â§ñÔºâ
  const markedForDeletion = new Set(exactDuplicates.flatMap((g) => g.deleteIds))
  const nameAddressDuplicates = findNameAndAddressDuplicates(facilities, markedForDeletion)
  console.log(`  ÊñΩË®≠ÂêçÔºã‰ΩèÊâÄ‰∏ÄËá¥: ${nameAddressDuplicates.length}„Ç∞„É´„Éº„Éó`)

  // 4. ÁµêÊûú„ÇíË°®Á§∫
  const allDuplicates = [...exactDuplicates, ...nameAddressDuplicates]
  const totalDeleteCount = displayDuplicates(allDuplicates)

  if (totalDeleteCount === 0) {
    console.log('\n‚ú® ÈáçË§á„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü')
    return
  }

  // 5. ÂâäÈô§ÂÆüË°å
  if (isExecuteMode) {
    console.log('\n‚ö†Ô∏è  ÂâäÈô§„ÇíÂÆüË°å„Åó„Åæ„Åô...')
    console.log('ÔºàCtrl+C „Åß‰∏≠Êñ≠„Åß„Åç„Åæ„Åô„ÄÇ5ÁßíÂæÖÊ©ü‰∏≠...Ôºâ')
    await new Promise((resolve) => setTimeout(resolve, 5000))

    const allDeleteIds = allDuplicates.flatMap((g) => g.deleteIds)
    await deleteFacilities(allDeleteIds)

    console.log('\n‚úÖ ÂâäÈô§ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü')
    console.log(`ÊÆã„ÇäÊñΩË®≠Êï∞: ${facilities.length - totalDeleteCount}‰ª∂Ôºà‰∫àÂÆöÔºâ`)
  } else {
    console.log('\nüí° „Åì„Çå„ÅØ„Éâ„É©„Ç§„É©„É≥„Åß„Åô„ÄÇÂÆüÈöõ„Å´„ÅØÂâäÈô§„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ')
    console.log('ÂâäÈô§„ÇíÂÆüË°å„Åô„Çã„Å´„ÅØ‰ª•‰∏ã„ÅÆ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ:')
    console.log('  npm run remove-duplicates:exec')
  }

  console.log('\n‚ú® ÂÆå‰∫ÜÔºÅ')
}

main().catch(console.error)
