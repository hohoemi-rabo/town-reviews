'use client'

interface SourceFilterProps {
  selectedSources: string[]
  onChange: (sources: string[]) => void
}

const HEARD_FROM_TYPES = [
  { value: 'ÂÆ∂Êóè„ÉªË¶™Êàö', label: 'ÂÆ∂Êóè„ÉªË¶™Êàö', emoji: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
  { value: 'Âèã‰∫∫„ÉªÁü•‰∫∫', label: 'Âèã‰∫∫„ÉªÁü•‰∫∫', emoji: 'üë•' },
  { value: 'ËøëÊâÄ„ÅÆ‰∫∫', label: 'ËøëÊâÄ„ÅÆ‰∫∫', emoji: 'üèòÔ∏è' },
  { value: '„ÅäÂ∫ó„ÅÆ‰∫∫', label: '„ÅäÂ∫ó„ÅÆ‰∫∫', emoji: 'üè™' },
  { value: 'SNS', label: 'SNS', emoji: 'üì±' },
  { value: '„Åù„ÅÆ‰ªñ', label: '„Åù„ÅÆ‰ªñ', emoji: 'üí≠' },
]

/**
 * ÊÉÖÂ†±Ê∫ê„Éï„Ç£„É´„Çø„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 * Ë§áÊï∞ÈÅ∏ÊäûÂèØËÉΩÔºàORÊù°‰ª∂Ôºâ
 */
export default function SourceFilter({
  selectedSources,
  onChange,
}: SourceFilterProps) {
  const handleToggle = (source: string) => {
    if (selectedSources.includes(source)) {
      onChange(selectedSources.filter((s) => s !== source))
    } else {
      onChange([...selectedSources, source])
    }
  }

  return (
    <div className="space-y-2">
      <h3 className="font-bold text-washi-green text-sm">ÊÉÖÂ†±Ê∫ê</h3>
      <div className="space-y-2">
        {HEARD_FROM_TYPES.map((source) => {
          const isSelected = selectedSources.includes(source.value)
          return (
            <button
              key={source.value}
              onClick={() => handleToggle(source.value)}
              className={`
                w-full px-4 py-2 rounded-lg text-sm font-medium transition-colors text-left
                ${
                  isSelected
                    ? 'bg-washi-green text-white'
                    : 'bg-washi-beige text-washi-green hover:bg-washi-beige-dark'
                }
              `}
            >
              <span className="mr-2">{source.emoji}</span>
              {source.label}
            </button>
          )
        })}
      </div>
    </div>
  )
}
